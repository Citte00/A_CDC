// ENERGY EQUATION:
Qh T, tau;
Q = Ilight; //photon energy per area

problem energy (T, tau, solver = sparsesolver)
    	= int3d(Th)([ux, uy, uz]'*grad(T)*tau + muT*grad(T)'*grad(tau))
		+ int3d(Th)(tauK * ([ux, uy, uz]'*grad(T)) * ([ux, uy, uz]'*grad(tau)))
    	- int2d(Th,5)(-Qlatent/(Cp*rhoa) * tau)
       	- int2d(Th,6)(Q/(Cp*rhoa) * tau)
		+ on(1, T=TambK);

// SPECIES MASS FRACTION EQUATION:
Qh h2o, co2, hv, c;

problem massH2O (h2o, hv, solver = sparsesolver)
    	= int3d(Th)([ux, uy, uz]' * grad(h2o) * hv + Dh2o * grad(h2o)' * grad(hv))
		+ int3d(Th)(tauK * ([ux, uy, uz]'*grad(h2o)) * ([ux, uy, uz]'*grad(hv)))
    	- int2d(Th,5)(Sh2o/rhoa * hv)
		+ on(1, h2o=h2oinit);

problem massCO2 (co2, c, solver = sparsesolver)
        = int3d(Th)([ux, uy, uz]' * grad(co2) * c + Dco2 * grad(co2)' * grad(c))
		+ int3d(Th)(tauK * ([ux, uy, uz]'*grad(co2)) * ([ux, uy, uz]'*grad(c)))
    	- int2d(Th,5)(Sco2/rhoa * c)
		+ on(1, co2=co2init);


// Temperature equation solution
energy;

// h2o concentration
massH2O;

// co2 concentration
massCO2;


// Temperature plot:
string temperature = "Temperature_" + t + ".vtk";
int[int] ordT=[1];
savevtk(temperature, Th, T, dataname="Temperature", order=ordT);

// H2O plot
string massh2o = "Massh2o_" + t + ".vtk";
int[int] ordh=[1];
savevtk(massh2o, Th, h2o, dataname="Mass_h2o", order=ordh);

// CO2 plot
string massco2 = "Massco2_" + t + ".vtk";
int[int] ordc=[1];
savevtk(massco2, Th, co2, dataname="Mass_co2", order=ordc);