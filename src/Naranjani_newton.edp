load "msh3"                         // Generating mesh tool
load "medit"                        // Mesh plotting tool
load "iovtk"                        // Velocity and pressure plotting tool
load "MUMPS_seq"                    // Solvers

include "getARGV.idp"

//Mesh Generation
int meshSize = getARGV("-n", 10);
mesh3 Th = cube(meshSize, meshSize, meshSize, [L*x,L*y,L*z]);

// medit("Mesh", Th);
// savemesh(Th, "Mesh_cube.mesh");
// On "FreeFem Documentation" it says that default faces labels are:
// 1: y=0 , 2: x=1 , 3: y=1 , 4: x=0 , 5: z=0 , 6: z=1
// In the case at hand we have: {2,4,5,6} = wall; 1 = inflow boundary ; 3 = outflow boundary

//Finite Elements Spaces:
fespace Vh(Th, [P2, P2, P2]);
Vh [ux,uy,uz] , [vx,vy,vz]; //Fluid velocity, test function
Vh [ux1,uy1,uz1] , [dux,duy,duz]; //Fluid Velocity at the next iteration, variation between one iteration and another

fespace Qh(Th, P1);
Qh p, q; // pressure e test function
Qh p1; // pressure at the next iteration
Qh Q;

// Stabilization term definitions
real absu = 0.;
Qh h = hTriangle;
Qh tauK;

//Macro
macro grad(v) [dx(v), dy(v), dz(v)] //
macro div(vx,vy,vz) ( dx(vx) + dy(vy) + dz(vz) ) //
macro ugradv(ux,uy,uz,vx,vy,vz) [ [ux,uy,uz]'*grad(vx) , [ux,uy,uz]'*grad(vy) , [ux,uy,uz]'*grad(vz) ] //

func uIn = U; // Dirichlet BC

// Stokes (linear) problem, used to initialized Newton's method:
problem Stokes( [ux,uy,uz,p] , [vx,vy,vz,q], solver=sparsesolver )

	= int3d(Th)(  1/Re*(grad(ux)'*grad(vx) + grad(uy)'*grad(vy) + grad(uz)'*grad(vz) )
			 - div(vx,vy,vz) * p 
		     + div(ux, uy, uz) * q ) /* l.h.s. della weak formulation */
	
	- int3d(Th)( (-g) * vz ) /* r.h.s. della weak formulation */

	+ on(2,4,5,6, ux = 0 , uy = 0 , uz = 0 ) /* Dirichlet BCs sulle pareti laterali (wall) */
	+ on(1, ux = 0 , uy = uIn , uz = 0 ); /* Dirichlet BCs sulla faccia 1 (inflow) */
	/* Neumann BCs sulla faccia 3 (outflow) */

// Linearized Navier Stokes:
problem linNS( [ux1,uy1,uz1,p1] , [vx,vy,vz,q], solver=sparsesolver )
	
	= int3d(Th)( 

		    ugradv(ux,uy,uz,ux1,uy1,uz1)' * [vx,vy,vz] +
		    ugradv(ux1,uy1,uz1,uz,uy,uz)' * [vx,vy,vz] +
			1/Re * ( grad(ux1)'*grad(vx) + grad(uy1)'*grad(vy) + grad(uz1)'*grad(vz) ) -
		    div(vx,vy,vz) * p1 +
		    div(ux1, uy1, uz1) * q)


	- int3d(Th)( (-g) * vz + ugradv(ux,uy,uz,ux,uy,uz)' * [vx,vy,vz])

	+ on(2,4,5,6, ux1 = 0 , uy1 = 0 , uz1 = 0 )
	+ on(1, ux1 = 0 , uy1 = uIn , uz1 = 0 );


real toll = 1e-03; // Error variation tolerance (of fluid velocity u)
int kmax = 300; // Maximum number of iteration for Newton to diverge

// Macro containing Newton's iterations:
macro NavierStokes(){
	Stokes;

	for(int k = 0; k < kmax; k++){

	    linNS;

	    dux[] = ux1[] - ux[];
	    duy[] = uy1[] - uy[];
	    duz[] = uz1[] - uz[];
	    real err = sqrt( int3d(Th) ( grad(dux)'*grad(dux) + grad(duy)'*grad(duy) + grad(duz)'*grad(duz) ) ) /
		    sqrt( int3d(Th) ( grad(ux)'*grad(ux) + grad(uy)'*grad(uy) + grad(uz)'*grad(uz) ) );

	    ux[] = ux1[];
	    uy[] = uy1[];
	    uz[] = uz1[];
	    p[] = p1[];

	    if( err < toll ){
    	    cout << "Value of the error after " << k+1 << " iterations: " << err << endl ;
    	    break;
	    }

	    if( k == kmax - 1 )
    	    cout << "WARNING: Newton method does not converge in " << kmax << " iterations!" << endl;
	}
} //

// Non-linear problem solution with Newton's method:
NavierStokes;

// Pressure and velocity plot:
int[int] ord=[1];
int[int] ord3=[1, 1, 1];
savevtk("Pressure.vtk", Th, p, dataname="Pressure", order=ord);
savevtk("Velocity.vtk", Th, [ux, uy, uz], dataname="Velocity", order=ord3);