gcar      = ccar1 * vectTc(t+1)^2 + ccar2 * vectTc(t+1) + ccar3;
gCO2      = (1/gbnd + 1/gstm + 1/gcar)^(-1);
Gamma     = cGamma * cQ10gamma^((vectTc(t+1) - 20)/10);
epsilon   = cepsilon * (gammaCO2 - Gamma) / (gammaCO2 + 2*Gamma);
fphotmaxn = epsilon * Ilight * gCO2 * comega * (gammaCO2 - Gamma);
fphotmaxd = epsilon * Ilight + gCO2 * comega * (gammaCO2 - Gamma);
fphotmax  = fphotmaxn / fphotmaxd;

// Gross canopy photosynthesis (g * m^-2 * s^-1)
func real fphot(real xsdw){
    return (1 - exp(-ck*clar*(1 - ctau) * xsdw)) * fphotmax;
};

// Maintenance respiration (g * m^-2 * s^-1)
func real fresp(real xsdw){
    return (crespSHT * (1 - ctau) * xsdw + crespRT * ctau * xsdw) * cQ10resp^((vectTc(t+1) - 25)/10);
};

// Specific growth rate (s^-1)
func real rgr(real xnsdw, real xsdw){
    return cgrMax * xnsdw / (xnsdw + cgamma * xsdw) * cQ10gr^((vectTc(t+1) - 20)/10);
};

// Rhs ODEs system
func real f1(real xnsdw, real xsdw){
    return calpha * fphot(xsdw) - rgr(xnsdw, xsdw) * xsdw - fresp(xsdw) - (1 -cbeta)/cbeta * rgr(xnsdw, xsdw) * xsdw;
};

func real f2(real xnsdw, real xsdw){
    return rgr(xnsdw, xsdw) * xsdw;
};

// We employed Crank-Nicolson to solve the ODEs system
func real phi1(real xnsdw, real xsdw){
    return vectDW(0,t) + dt/2 * (f1(vectDW(0,t), vectDW(1,t))  + f1(xnsdw, xsdw));
};

func real phi2(real xnsdw, real xsdw){
    return vectDW(1,t) + dt/2 * (f2(vectDW(0,t), vectDW(1,t))  + f2(xnsdw, xsdw));
};

// Solution of the ODEs system, we use a fixed point method to deal with non-linearity
int j = 0;
real err = toll2 + 1;
real[int] w0 = [vectDW(0,t), vectDW(1,t)];
real[int] w1 = [0., 0.];
while((err > toll2) && (j < Nmax)){
    w1 = [phi1(w0[0], w0[1]), phi2(w0[0], w0[1])];
    err = max(abs(w1[0] - w0[0]), abs(w1[1] - w0[1]));
    w0 = w1;
    j++;
}

vectDW(:,t+1) = [w1[0], w1[1]];
Time[t+1] = Time[t] + dt;

cout << "X_nsdw = " << vectDW(0,t+1) << endl;
cout << "X_sdw = " << vectDW(1,t+1) << endl;