// GENERAL DATA:
real Cp = 1012.;                // Specific heat capacity of air (J/Kg K)
real lambda = 0.024;            // Thermal conductivity of the air (W/m*K)
real Ilight = 45.;              // Light intensity (W/m^2) -> given
real g = 9.81;                  // Gravitational acceleration
real rhoa = 1.29;               // Density of the air (kg/m^3) taken from internet

// Number of iterations in time
int t0 = 0;
int tmax = 86400*20;            // seconds in 20 days
int dt = 24*60*60;
int N = (tmax - t0)/dt;

func chi = (x>=0.01 && x<=0.99 && x>=0.01 && x<=0.99 && z>=0 && z<=0.15);    // Crop position indicator function

// NARANJANI:
// NS equation
real L = 1;                     // Characteristic length of the cell (m)
real mu = 1e-2;                 // Air viscosity
real U = 0.3;                   // Characteristic velocity and inlet boundary velocity (Dirichlet condition NS)
real Re = rhoa*U*L/mu;          //Reynolds number
cout << "Re: " << Re << endl;

// Energy Balance equation
real Tamb = 25;                 // Ambient Temperature (Celsius): boundary cond. in cell energy balance
func TambK = Tamb + 273.15;     // Scalar field, ambient temperature in Kelvin
real Ta = 0.;                   // Temperature of air
real Tc = 0.;                   // Temperature of Canopy (= Ta - 1)
// Tc=21.2 during the day e Tc=20.8 during the night (it should be a consequence of turning on/off LED lights)

// Vectors for temperature data storage in time:
real[int] vectTa(N+1);
real[int] vectTc(N+1);
vectTa(0) = Ta;
vectTc(0) = Tc;

// Mass fraction equation
real Dh2o = 0.2178e-4;          //Diffusion coefficient water
real Dco2 = 0.1381e-4;          //Diffusion coefficient carbon dioxyde

real Sh2o = 0.;                 // Source term for H2O concentration balance
real Sco2 = 0.;                 // Source term for CO2 concentration balance
// Source terms Sh20, Sco2 are updated at each iteration from Van Henten (from fphot)
func h2oinit = 0.85;            // from paper
func co2init = 0.00153;         // from paper

real gammaCO2 = 0.;             // CO2 concentration in air
real gammaH2Oair = 0.;          // Vapour concentration in air
real gammaH2Osur = 0.;          // Vapour concentration on canopy surface


// VAN HENTEN:
//Constants for the dfferential equations
real calpha   = 0.68;            // Ratio of molecular weight of CH20 and CO2
real cbeta    = 0.8;             // Respiratory and synthesis losses of non-structural material due to growht

//Constants for r_gr equation
real cgrMax   = 5e-6;            // Saturation growth rate at 20°C (s^-1)
real cgamma   = 1;               // Should have a value between 0.5-1.0
real cQ10gr   = 1.6;             // Q10 factor for growth

//Constants for f_resp equation
real ctau     = 0.15;            // Ratio of the root dry weight and the total dry weight
real crespSHT = 3.47e-7;         // Shoot maintenance respiration coefficient at 25°C (s^-1)
real crespRT  = 1.16e-7;         // Root maintenance respiration coefficient at 25°C (s^-1)
real cQ10resp = 2;               // Q10 factor of the maintenance respiration

//Constants for f_phot equation
real ck        = 0.9;            // Extinction coefficient
real clar      = 75e-3;          // Structural leaf area (m^2 * g)
real comega    = 1.83e-3;        // Estimated CO2 density at 15◦C temperature and ambient pressure (g * m^-3)
real cGamma    = 40;             // CO2 compensation point at 20°C (ppm)
real cQ10gamma = 2;              // Q10 value which accounts for the effect of temperature on Γ
real cepsilon  = 17e-6;          // Value of epsilon at very high CO2 concentration (g * J^-1)
real gbnd      = 7e-3;           // Boundary layer conductance (m * s^-1) (wind 0.1ms^-1, deltaT=5, char length = 0.075m)
real gstm      = 5e-3;           // Stomatal conductance (m * s^-1) (for a crop not subjected to stress)
real ccar1     = -1.32e-5;       // (m * s^-1 * °C^-2)
real ccar2     = 5.94e-4;        // (m * s^-1 * °C^-1)
real ccar3     = -2.64e-3;       // (m * s^-1)

// Terms that changes at each iteration
real gcar      = 0.;             // Carboxylation conductance (m * s^-1)
real gCO2      = 0.;             // Canopy conductance to CO2 diffusion (m * s^-1)
real Gamma     = 0.;             // CO2 compensation point (ppm)
real epsilon   = 0.;             // Light use efficiency (g * J^-1)
real fphotmaxn = 0.;             // Numerator of f_phot_max
real fphotmaxd = 0.;             // Denominator of f_phot_max
real fphotmax  = 0.;             // Gross carbon dioxide assimilation rate of the canopy (g * m^-2 * s^-1)

// Stopping criteria for fixed point method
real Nmax = 100;
real toll2 = 1e-6;

// Initial dry weigth values (provided by Agricola Moderna)
real Xnsdw = 6.75e-5;
real Xsdw = 2.25e-5;

// Vectors for dry weight data storage in time:
int[int] Time(N+1);
real[int, int] vectDW(2,N+1);
vectDW(:,0) = [Xnsdw, Xsdw];


// GRAAMANS:

// H EQUATION:
real PPFD = 4.6 * Ilight;                                      // Photosynthetic photon flux densities (micromol / m^2 s)
real ra   = 0.;                                                // Aerodynamic resistance to heat (s/m)
real rs   = 60 * (1500 + PPFD) / (200 + PPFD);                 // Surface resistance (s/m)
real LAI  = 0.;                                                // Leaf Area Index
real H    = 0.;                                                // Sensible heat exchange (W/m^2)

// Coefficient 4.6 considers the complete light spectrum
real l = 0.11;                                                 // Mean leaf diameter

// R_net equation:
real rhor = 0.05;                                               // Reflection coefficient
real CAC = 0.9;                                                 // Cultivation area cover (% of projected leaf area to cultivation area)
real Rnet = (1 - rhor) * Ilight * CAC;                          // Net radiation, amount of radiation intercepted and absorbed by the crop
cout << "R_net = " << Rnet << "Wm^2" << endl;

// Lambda_E equation
real lambdaE = 0.;                                              // Latent heat exchange (W/m^2)
real lambdaH = 0.;                                              // Latent heat of the evaporation of water (W/m^2)
real lambdav = 2257;                                            // Latent heat of vaporization (Wikipedia) (J/g)
real[int] vectET(N+1);                                            // Mass water evapotranspiration rate (g/m^2 s)
vectET(0) = 0.;