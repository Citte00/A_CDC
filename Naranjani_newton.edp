load "msh3" // Tool per generare la mesh 3d
load "medit" // Tool per plottare la mesh

//Data
real mu = 1; //a 20C da internet
// real rhoa = 1; // da internet
real g = 9.81; //gravitational acceleration
real uMax = 1;// Inlet boundary velocity (for Dirichlet condition)


//Mesh Generation
real L = 1;
mesh3 Th = cube(5, 5, 5, [L*x,L*y,L*z]);
medit("Mesh", Th);
// Su "FreeFem Documentation" ho trovato che le labels di default per le facce sono:
// 1: y=0 , 2: x=1 , 3: y=1 , 4: x=0 , 5: z=0 , 6: z=1
// Dunque nel nostro caso abbiamo che: {2,4,5,6} = wall; 1 = inflow boundary ; 3 = outflow boundary
// Si potrebbe (in futuro) inserire un labeling delle facce da usare nella formulazione del problema, per maggiore chiarezza

//Finite Elements Spaces:
fespace Vh(Th, [P2, P2, P2]);
Vh [ux,uy,uz] , [vx,vy,vz] ; //Fluid velocity, test function
Vh [ux1,uy1,uz1] , [dux,duy,duz] ; //Fluid Velocity all'iterazione successiva, variazione tra un'iterazione e l'altra

fespace Qh(Th, P1);
Qh p , q ; // Potenza e test function
Qh p1 ; // Potenza all'iterazione successiva
Qh rhoa = 1;

//Macro
macro grad(v) [dx(v), dy(v), dz(v)] //
macro div(vx,vy,vz) ( dx(vx) + dy(vy) + dz(vz) ) //
macro DivRho(vx,vy,vz,rho) ( grad(rho)' * [vx,vy,vz] + rho * div(vx,vy,vz) ) //
macro ugradv(ux,uy,uz,vx,vy,vz) [ [ux,uy,uz]'*grad(vx) , [ux,uy,uz]'*grad(vy) , [ux,uy,uz]'*grad(vz) ] //

func h = 0; // Dato al bordo di Neumann
func uIn = uMax; // Dato al bordo Dirichlet

// Problema di Stokes (lineare) per inizializzare il metodo di Newton:
problem Stokes( [ux,uy,uz,p] , [vx,vy,vz,q] )

	= int3d(Th)( mu * ( grad(ux)'*grad(vx) + grad(uy)'*grad(vy) + grad(uz)'*grad(vz) ) +
		     mu * div(ux,uy,uz) * div(vx,vy,vz) -
             div(vx,vy,vz) * p +
		     DivRho(ux, uy, uz, rhoa) * q ) /* l.h.s. della weak formulation */
	
	- int3d(Th)( rhoa * (-g) * vz ) /* r.h.s. della weak formulation */

	+ on(2,4,5,6, ux = 0 , uy = 0 , uz = 0 ) /* Dirichlet BCs sulle pareti laterali (wall) */
	+ on(1, ux = 0 , uy = uIn , uz = 0 ) /* Dirichlet BCs sulla faccia 1 (inflow) */
	+ int2d(Th,3)( h*vy ); /* Neumann BCs sulla faccia 3 (outflow) */

// Navier Stokes linearizzato:
problem linNS( [ux1,uy1,uz1,p1] , [vx,vy,vz,q] )
	
	= int3d(Th)( 

		    rhoa * ugradv(ux,uy,uz,ux1,uy1,uz1)' * [vx,vy,vz] +

		     mu * ( grad(ux1)'*grad(vx) + grad(uy1)'*grad(vy) + grad(uz1)'*grad(vz) ) +
	 	     mu * div(ux1,uy1,uz1) * div(vx,vy,vz) -
		     div(vx,vy,vz) * p1 +
		     DivRho(ux1, uy1, uz1, rhoa) * q )

	- int3d(Th)( rhoa * (-g) * vz )

	+ on(2,4,5,6, ux1 = 0 , uy1 = 0 , uz1 = 0 )
	+ on(1, ux1 = 0 , uy1 = uIn , uz1 = 0 )
	+ int2d(Th,3)( h*vy );

// Macro contenente ciclo di Newton per la risoluzione:
real toll = 1e-09; // Tolleranza per la variazione dell'errore (della fluid velocity u)
int kmax = 15; // Numero massimo di iterazioni per capire se Newton diverge

macro NavierStokes(){
	Stokes;

	for(int k = 0; k < kmax; k++){

	    linNS;

	    dux[] = ux1[] - ux[];
	    duy[] = uy1[] - uy[];
	    duz[] = uz1[] - uz[];
	    real err = sqrt( int3d(Th) ( grad(dux)'*grad(dux) + grad(duy)'*grad(duy) + grad(duz)'*grad(duz) ) ) /
		    sqrt( int3d(Th) ( grad(ux)'*grad(ux) + grad(uy)'*grad(uy) + grad(uz)'*grad(uz) ) );

	    ux[] = ux1[];
	    uy[] = uy1[];
	    uz[] = uz1[];
	    p[] = p1[];

	    if( err < toll ){
    	    cout << "Error after " << k+1 << " iterations: " << err << endl ;
    	    break;
	    }

	    if( k == kmax - 1 )
    	    cout << "WARNING: Newton method does not converge in " << kmax << " iterations!" << endl;
	}
} //

// Risoluzione del problema non-lineare usando Newton:
NavierStokes;

// Plot del risultato:
plot(p, ps = "Power.eps", value=1, fill=1);
plot([ux,uy,uz], ps = "FluidVelocity.eps", value=1, coef=.05);