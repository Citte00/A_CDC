load "msh3" // Tool per generare la mesh 3d
load "medit" // Tool per plottare la mesh
load "iovtk" //Tool per plottare la pressione

//Data
real L = 1;
real mu = 10; //a 20C da internet
real rhoa = 1.29; // da internet kg*m^(-3)
real g = 9.81; //gravitational acceleration
real U = 0.3;// Characteristic velocity and inlet boundary velocity (for Dirichlet condition)
real Re=rhoa*U*L/mu; //Reynolds number
cout<<"Re: "<<Re<<endl;

//Mesh Generation
mesh3 Th = cube(10, 10, 10, [L*x,L*y,L*z]);

//medit("Mesh", Th);
savemesh(Th, "Mesh_cube.mesh");
// Su "FreeFem Documentation" ho trovato che le labels di default per le facce sono:
// 1: y=0 , 2: x=1 , 3: y=1 , 4: x=0 , 5: z=0 , 6: z=1
// Dunque nel nostro caso abbiamo che: {2,4,5,6} = wall; 1 = inflow boundary ; 3 = outflow boundary
// Si potrebbe (in futuro) inserire un labeling delle facce da usare nella formulazione del problema, per maggiore chiarezza

//Finite Elements Spaces:
fespace Vh(Th, [P2, P2, P2]);
Vh [ux,uy,uz] , [vx,vy,vz]; //Fluid velocity, test function
Vh [ux1,uy1,uz1] , [dux,duy,duz]; //Fluid Velocity all'iterazione successiva, variazione tra un'iterazione e l'altra

fespace Qh(Th, P1);
Qh p, q ; // pressione e test function
Qh p1 ; // pressione all'iterazione successiva
//Qh rhoa = 1;

//Macro
macro grad(v) [dx(v), dy(v), dz(v)] //
macro div(vx,vy,vz) ( dx(vx) + dy(vy) + dz(vz) ) //
//macro DivRho(vx,vy,vz,rho) ( grad(rho)' * [vx,vy,vz] + rho * div(vx,vy,vz) ) //
macro ugradv(ux,uy,uz,vx,vy,vz) [ [ux,uy,uz]'*grad(vx) , [ux,uy,uz]'*grad(vy) , [ux,uy,uz]'*grad(vz) ] //

func h = 0; // Dato al bordo di Neumann
func uIn = U; // Dato al bordo Dirichlet

// Problema di Stokes (lineare) per inizializzare il metodo di Newton:
problem Stokes( [ux,uy,uz,p] , [vx,vy,vz,q] )

	= int3d(Th)(  1/Re*(grad(ux)'*grad(vx) + grad(uy)'*grad(vy) + grad(uz)'*grad(vz) )
			 - div(vx,vy,vz) * p 
		     + div(ux, uy, uz) * q ) /* l.h.s. della weak formulation */
	
	- int3d(Th)( (-g) * vz ) /* r.h.s. della weak formulation */

	+ on(2,4,5,6, ux = 0 , uy = 0 , uz = 0 ) /* Dirichlet BCs sulle pareti laterali (wall) */
	+ on(1, ux = 0 , uy = uIn , uz = 0 ) /* Dirichlet BCs sulla faccia 1 (inflow) */
	+ int2d(Th,3)( h*vy ); /* Neumann BCs sulla faccia 3 (outflow) */

// Navier Stokes linearizzato:
problem linNS( [ux1,uy1,uz1,p1] , [vx,vy,vz,q] )
	
	= int3d(Th)( 

		    ugradv(ux,uy,uz,ux1,uy1,uz1)' * [vx,vy,vz] +
			1/Re* ( grad(ux1)'*grad(vx) + grad(uy1)'*grad(vy) + grad(uz1)'*grad(vz) ) -
		     div(vx,vy,vz) * p1 +
		     div(ux1, uy1, uz1) * q )

	- int3d(Th)( (-g) * vz )

	+ on(2,4,5,6, ux1 = 0 , uy1 = 0 , uz1 = 0 )
	+ on(1, ux1 = 0 , uy1 = uIn , uz1 = 0 )
	+ int2d(Th,3)( h*vy );

// Macro contenente ciclo di Newton per la risoluzione:
real toll = 1e-03; // Tolleranza per la variazione dell'errore (della fluid velocity u)
int kmax = 150; // Numero massimo di iterazioni per capire se Newton diverge

macro NavierStokes(){
	Stokes;

	for(int k = 0; k < kmax; k++){

	    linNS;

	    dux[] = ux1[] - ux[];
	    duy[] = uy1[] - uy[];
	    duz[] = uz1[] - uz[];
	    real err = sqrt( int3d(Th) ( grad(dux)'*grad(dux) + grad(duy)'*grad(duy) + grad(duz)'*grad(duz) ) ) /
		    sqrt( int3d(Th) ( grad(ux)'*grad(ux) + grad(uy)'*grad(uy) + grad(uz)'*grad(uz) ) );

	    ux[] = ux1[];
	    uy[] = uy1[];
	    uz[] = uz1[];
	    p[] = p1[];

	    if( err < toll ){
    	    cout << "Value of the error after " << k+1 << " iterations: " << err << endl ;
    	    break;
	    }

	    if( k == kmax - 1 )
    	    cout << "WARNING: Newton method does not converge in " << kmax << " iterations!" << endl;
	}
} //

// Risoluzione del problema non-lineare usando Newton:
NavierStokes;

// Plot del risultato:
int[int] ord=[1];
int[int] ord3=[1, 1, 1];
savevtk("Pressure.vtk", Th, p, dataname="Pressure", order=ord);
savevtk("Velocity.vtk", Th, [ux, uy, uz], dataname="Velocity", order=ord3);

func to=25; //da sistemare
Qh T, tau;
real Cp=1012; //specific heat capacity of air 
real lambda=0.024; //thermal conductivity of the air
Qh Q = 40; //photon energy per area

problem energy (T, tau)
    = int3d(Th)(rhoa*Cp*[ux, uy, uz]'*grad(T)*tau + lambda*grad(T)'*grad(tau))
    -int2d(Th,6)(-Q*tau)
    +on(1,3, T=to);

energy;

// Plot del risultato:
int[int] ordT=[1];
savevtk("Temperature.vtk", Th, T, dataname="Temperature", order=ordT);

func h2oinit=0.85; // dal paper
func co2init=0.153; //dal paper
Qh h2o, co2, hv, c;
real Rh2o=0, Rco2=0; //reaction term, always zero (in our model)

problem massH2O (h2o, hv)
    = int3d(Th)(rhoa*[ux, uy, uz]'*grad(h2o)*hv )
    - int3d(Th)(Rh2o*hv+Sh2o*hv*(x>=0.475 && x<=0.525 && y>=0.475 && y<=0.525 && z>=0 && z<=0.15))
	 +on(1, h2o=h2oinit);
    //BC ?

massH2O;
//cout<<"h2o mass fraction: "<<h2o<<endl;
int[int] ordh=[1];
savevtk("massh2o.vtk", Th, h2o, dataname="Mass_h2o", order=ordh);

problem massCO2 (co2, c)
    = int3d(Th)(rhoa*[ux, uy, uz]'*grad(co2)*c )
    -int3d(Th)(Rco2*c+Sco2*c*(x>=0.475 && x<=0.525 && y>=0.475 && y<=0.525 && z>=0 && z<=0.15))
	+on(1, co2=co2init);
    //BC ?

massCO2;
//cout<<"co2 mass fraction: "<<co2<<endl;
int[int] ordc=[1];
savevtk("massco2.vtk", Th, co2, dataname="Mass_co2", order=ordc);