real Sh2o=0, Sco2=0; //valore iniziale, poi da modificare con la retroazione

real Tc;
real gammaCO2;
//constants for the differential equations
real calpha   = 0.68;            //ratio of molecolar weight of CH20 and CO2
real cbeta    = 0.8;             //respiratory and synthesis losses of non-structural material due to growht

//constants for r_gr equation
real cgrMax   = 5e-6;            //saturation growth rate at 20°C (s^-1)
real cgamma   = 0.8;             //should have a value between 0.5-1.0
real cQ10gr   = 1.6;             //Q10 factor for growth


//constants for f_resp equation
real ctau     = 0.15;            //ratio of the root dry weigth and the total dry weigth
real crespSHT = 3.47e-7;         //shoot maintenance respiration coefficient at 25°C (s^-1)
real crespRT  = 1.16e-7;         //root maintenance respiration coefficient at 25°C (s^-1)
real cQ10resp = 2;               //Q10 factor of the maintenance respiration

//constants for f_phot equation
real ck        = 0.9;            //extinction coefficient
real clar      = 75e-3;          //structural leaf area (m^2 * g)
real Upar      = 45;             //incident photosyntetically active radiation, dato fornito da Agricola Moderna (W * m^-2)

real comega    = 1.83e-3;        //estimated CO2 density at 15◦C temperature and ambient pressure (g * m^-3)
real cGamma    = 40;             //CO2 compensation point at 20°C (ppm)
real cQ10gamma = 2;              //Q10 value which accounts for the effect of temperature on Γ
real cepsilon  = 17e-6;          //value of epsilon at very high CO2 concentration (g * J^-1)
real gbnd      = 7e-3;           //boundary layer conductance (m * s^-1)
real gstm      = 5e-3;           //stomatal conductance (m * s^-1)
real ccar1     = -1.32e-5;       // (m * s^-1 * °C^-2)
real ccar2     = 5.94e-4;        // (m * s^-1 * °C^-1)
real ccar3     = -2.64e-3;       // (m * s^-1)

real gcar      = ccar1 * Tc^2 + ccar2 * Tc + ccar3;                     //carboxylation conductance (m * s^-1)
real gCO2      = (1/gbnd + 1/gstm + 1/gcar)^-1;                         //canopy conductance to CO2 diffusion (m * s^-1)
real Gamma     = cGamma * cQ10gamma^((Tc - 20)/10);                     //CO2 compensation point (ppm)
real epsilon   = cepsilon * (gammaCO2 - Gamma) / (gammaCO2 + 2*Gamma);  //light use efficiency (g * J^-1)
real fphotmaxn = epsilon * Upar * gCO2 * comega * (gammaCO2 - Gamma);   //numerator of f_phot_max
real fphotmaxd = epsilon * Upar + gCO2 * comega * (gammaCO2 - Gamma);   //denominator of f_phot_max
real fphotmax  = fphotmaxn / fphotmaxd;                                 //gross carbon dioxide assimilation rate of the canopy (g * m^-2 * s^-1)

int t0 = 0;
int tmax = 86400*20; //secondi in un giorno*20 giorni
int dt = 24*60*60;
int N=(tmax - t0)/dt;


real Nmax = 100;
real toll2 = 1e-3;

real Xnsdw = 0.00675;
real Xsdw = 0.00225;

//gross canopy photosynthesis (g * m^-2 * s^-1)
func real fphot(real xsdw){ return (1 - exp(-ck*clar*(1 - ctau) * xsdw)) * fphotmax; };

//maintenance respiration (g * m^-2 * s^-1)
func real fresp(real xsdw){ return (crespSHT * (1 - ctau) * xsdw + crespRT * ctau * xsdw) * cQ10resp^((Tc - 25)/10); };

//specific growth rate (s^-1)
func real rgr(real xnsdw, real xsdw){ return cgrMax * xnsdw / (xnsdw + cgamma * xsdw) * cQ10gr^((Tc - 20)/10); };

func real f1(real xnsdw, real xsdw){
    return calpha * fphot(xsdw) - rgr(xnsdw, xsdw) * xsdw - fresp(xsdw) - (1 -cbeta)/cbeta * rgr(xnsdw, xsdw) * xsdw;
};

func real f2(real xnsdw, real xsdw){
    return rgr(xnsdw, xsdw) * xsdw;
};

func real phi1(real Xnsdwnew, real xsdw){
    return Xnsdw + dt/2 * (f1(Xnsdw, xsdw)  + f1(Xnsdwnew, xsdw));
};

func real phi2(real Xsdwnew, real xnsdw){
    return Xsdw + dt/2 * (f2(xnsdw, Xsdw)  + f2(xnsdw, Xsdwnew));
};




for (int n=0; n<10; n++){
include "Naranjani_newton.edp"
// dal Naranjani prendiamo la canopy temperature T
//Tc=21.2 di giorno e Tc=20.8 di notte
//sempre dal naranjani prendiamo h20 e co2

//real Tc=T;
//real gammaCO2  = co2*1e6;            //concentration of CO2 in the greenhouse air (ppm)
//ci interessano i valori sulle foglie, ma intanto prendiamo la media sul volume (chiedere ad Alessandro)
Tc = int3d(Th)(T)/int3d(Th)(1.0); 
gammaCO2 = int3d(Th)(co2*1e6)/int3d(Th)(1.0); 

int[int] Time(N);
real[int] vectNSDW(N);
real[int] vectSDW(N);

for(int i = 0.; i < N; ++i){
    int j = 0;
    real err1 = toll2 + 1;
    real err2 = toll2 + 1;
    real w0 = phi1(Xnsdw, Xsdw);
    real v0 = phi2(Xsdw, Xnsdw);
    real w1 = 0.;
    real v1 = 0.;
    while(((err1 > toll2) || (err2 > toll2)) && (j < Nmax)){
        w1 = phi1(w0, v0);
        v1 = phi2(v0, w0);
        err1 = abs(w1 - w0);
        err2 = abs(v1 - v0);
        w0 = w1;
        v0 = v1;
        j++;
    }

    Xnsdw = w1;
    Xsdw = v1;
    vectNSDW[i]=Xnsdw;
    vectSDW[i]=Xsdw;
    Time[i]=t0+i*dt;
}

cout << "X_nsdw = " << Xnsdw << endl;
cout << "X_sdw = " << Xsdw << endl;

real fph=fphot(Xsdw);
cout << "fphot = " << fph << endl;

Sco2=fph;
Sh2o=fph;

//plot([Time,vectNSDW], wait=true);

/* ofstream gnu("plotNSDW.gp");
for (int i = 0; i < N; i++)
   gnu << Time[i] << " " << vectNSDW[i] << endl;

//exec("echo 'plot \"plotNSDW.gp\" w l \n pause 5 \n set term postscript \n set output \"gnuplot.eps\" \n replot \n quit' | gnuplot");

ofstream gnu("plot.gp");
for (int i = 0; i < N; i++)
    gnu << Time[i] << " " << vectSDW[i] << endl;

//exec("echo 'plot \"plotSDW.gp\" w l \n pause 5 \n set term postscript \n set output \"gnuplot.eps\" \n replot \n quit' | gnuplot");
*/


//plot([Time,vectSDW], ps="SDWplot.eps");
//ofstream file("result.txt");
//file << "X_nsdw = " << Xnsdw << "\n";
//file << "X_sdw = " << Xsdw << "\n";

include "Graamans.edp"
}