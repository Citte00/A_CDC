include "data.edp"

//Tc=21.2 di giorno e Tc=20.8 di notte (overdubbed essere conseguenza dell'accensione/spegnimento dei led)
include "Naranjani_newton.edp"

// N si trova in Van Henten data, cambia x aumentare iterazioni per introdurre giorno/notte !!!!!

for (int t = 0; t < N; t++){

    cout << "Day: " << t+1 << endl;

    real night=0; //dobbiamo capire come gestire notte e giorno

    include "Naranjani_energy.edp"

    // As Ta we take integral mean of T, air temperature scalar field computed in Naranjani_energy.edp:
    // (Naranjani uses Kelvin degrees, we want to use Celsius)
    Ta = int3d(Th)(T)/int3d(Th)(1.0) - 273.15;
    Tc= Ta-1;           // approximation suggested by Agricola Moderna
    cout << "Tc = " << Tc << endl;

    gammaCO2 = int3d(Th)(co2 * 1e6 * (1-chi))/int3d(Th)(1-chi);
    cout << "gammaCO2 = " << gammaCO2 << endl;
    // integral mean and change of unit (now we want it g/m^3):
    gammaH2Oair = int3d(Th)(h2o * rhoa * 1e+3 * (1-chi))/int3d(Th)(1-chi);
    gammaH2Osur = int3d(Th)(h2o * rhoa * 1e+3 * chi)/int3d(Th)(chi);
    cout << "gammaH2Oair = " << gammaH2Oair << endl;
    cout << "gammaH2Osur = " << gammaH2Osur << endl;

    include "VanHenten.edp"

    // Convertiamo u.m. dei valori da inserire su Naranjani
    real fph=fphot(Xsdw);
    cout << "fphot = " << fph << endl;
    // fph Ã¨ g/m^(2)
    Sco2=fph/1000; //da g a kg
    Sh2o=fph/1000;
    //dobbiamo arrivare ad avere kg/m^3
    //prendiamo come lunghezza caratteristica l'altezza della pianta (cfr. Naranjani)
    //conversione 1 a 1, dividiamo per 1m

    //ofstream file("result.txt");
    //file << "X_nsdw = " << Xnsdw << "\n";
    //file << "X_sdw = " << Xsdw << "\n";

    //Compute LAI from Xsdw using formula provided by Van Henten:
    LAI = (1-ctau)*clar*Xsdw;

    include "Graamans.edp"

    cout << "\n" << endl;
}

//plot([[Time, Time]], wait=true, ps="NSDWplot.eps");
//plot([Time, vectDW[1][]], ps="SDWplot.eps");

//include "ffmatlib.idp"

//ffSaveData(vectDW, "export_DW.txt");
//ffSaveData(Time,"export_time.txt");


ofstream gnu("plotNSDW.gp");
for (int i = 0; i < N+1; i++)
        gnu << Time[i]/(24*60*60) << " " << vectDW(0,i) << endl;

ofstream gnu("plotSDW.gp");
for (int i = 0; i < N+1; i++)
        gnu << Time[i]/(24*60*60) << " " << vectDW(1,i) << endl;

//exec("echo 'plot \"plotNSDW.gp\" w l \n pause 5 \n set term postscript \n set output \"gnuplot.eps\" \n replot \n quit' | gnuplot");

/*ofstream gnu("plot.gp");
for (int i = 0; i < N; i++)
    gnu << Time[i] << " " << vectDW(1,i) << endl;

exec("echo 'plot \"plotSDW.gp\" w l \n pause 5 \n set term postscript \n set output \"gnuplot.eps\" \n replot \n quit' | gnuplot");
*/